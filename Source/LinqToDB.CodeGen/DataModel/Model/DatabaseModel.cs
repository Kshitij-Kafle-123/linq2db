using System.Collections.Generic;
using System.Linq;
using LinqToDB.CodeModel;

namespace LinqToDB.DataModel
{
	/// <summary>
	/// Root object for database model. Contains reference to data model and various model options.
	/// </summary>
	public sealed class DatabaseModel
	{
		public DatabaseModel(DataContextModel context)
		{
			DataContext = context;
		}

		/// <summary>
		/// Gets database context descriptor.
		/// </summary>
		public DataContextModel DataContext                      { get; }

		/// <summary>
		/// Optional header comment text on top of each generated file. Will be wrapped into &lt;auto-generated&gt; tag.
		/// </summary>
		public string?          AutoGeneratedHeader              { get; set; }
		/// <summary>
		/// Enable supporession of xml-doc build warnings (e.g. due to missing xml-doc comments) in generated code.
		/// </summary>
		public bool             DisableXmlDocWarnings            { get; set; }
		/// <summary>
		/// Enable generation of nullable annotations (NRT) in generated code.
		/// </summary>
		public bool             NRTEnabled                       { get; set; }
		/// <summary>
		/// Enable ordering of Find extension method parameters for entity with composite primary key by ordinal of corresponding
		/// column in primary key constraint. Otherwise order them by name.
		/// </summary>
		public bool             OrderFindParametersByOrdinal     { get; set; }
		/// <summary>
		/// Enables generation of error if stored procedure or table function schema load failed.
		/// </summary>
		public bool             GenerateProceduresSchemaError    { get; set; }
		/// <summary>
		/// Skip generation of mappings for stored procedure, if it failed to load it's schema.
		/// Otherwise mapping will be generated, but procedure will have only parameters, no return data sets.
		/// This option doesn't affect table functions with schema errors, as we skip them on error always, because
		/// table function must have return result set.
		/// </summary>
		public bool             SkipProceduresWithSchemaErrors   { get; set; }
		/// <summary>
		/// When <c>true</c>, stored procedure mapping use <see cref="List{T}"/> as return type.
		/// Otherwise <see cref="IEnumerable{T}"/> type used.
		/// </summary>
		public bool             GenerateProcedureResultAsList    { get; set; }
		/// <summary>
		/// Enables generation of database type in stored procedure parameter mapping.
		/// </summary>
		public bool             GenerateProcedureParameterDbType { get; set; }
		/// <summary>
		/// When <c>true</c>, table function mapping use <see cref="ITable{T}"/> as return type.
		/// Otherwise <see cref="IQueryable{T}"/> type used.
		/// </summary>
		public bool             TableFunctionReturnsTable        { get; set; }
		/// <summary>
		/// When <c>true</c>, many-sided association property/method will have T[] type.
		/// Otherwise see <see cref="AssociationCollectionType"/> setting.
		/// </summary>
		public bool             AssociationCollectionAsArray     { get; set; }
		/// <summary>
		/// When specified, many-sided association property/method will use specified type as return type.
		/// Type must be open generic type with one type argument, e.g. <see cref="IEnumerable{T}"/>, <see cref="List{T}"/> or <see cref="ICollection{T}"/>.
		/// Otherwise <see cref="IQueryable{T}"/> type used.
		/// </summary>
		public IType?           AssociationCollectionType        { get; set; }
	}
}
