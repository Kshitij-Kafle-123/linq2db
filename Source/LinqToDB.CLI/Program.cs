using System;
using System.Data.Common;
using System.IO;
using System.Reflection;
using LinqToDB.CLI;
using LinqToDB.CodeGen.Configuration;
using LinqToDB.CodeModel;
using LinqToDB.Data;
using LinqToDB.Metadata;
using LinqToDB.Naming;
using LinqToDB.Scaffold;
using Microsoft.Extensions.Configuration;

namespace LinqToDB.Tools
{
	internal static class Program
	{
		private static int Main(string[] args)
		{
			//Directory.CreateDirectory(@"..\..\..\Generated");
			//BuildModel("sql.2017");
			//BuildModel("pg10");
			//NameNormalizationTest.NormalizationTest();
			////var sqlce = Assembly.LoadFrom(@"c:\Program Files\Microsoft SQL Server Compact Edition\v4.0\Desktop\System.Data.SqlServerCe.dll");
			//RegisterSapHanaFactory();

			return new LinqToDBCLIController().Execute(args);
		}

		// TODO: move path to options. same for sqlce provider
		private static void RegisterSapHanaFactory()
		{
			try
			{
				// woo-hoo, hardcoded pathes! default install location on x64 system
				var srcPath = @"c:\Program Files (x86)\sap\hdbclient\dotnetcore\v2.1\Sap.Data.Hana.Core.v2.1.dll";
				var targetPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory!, Path.GetFileName(srcPath));
				if (File.Exists(srcPath))
				{
					// original path contains spaces which breaks broken native dlls discovery logic in SAP provider
					// if you run tests from path with spaces - it will not help you
					File.Copy(srcPath, targetPath, true);
					var sapHanaAssembly = Assembly.LoadFrom(targetPath);
					DbProviderFactories.RegisterFactory("Sap.Data.Hana", sapHanaAssembly.GetType("Sap.Data.Hana.HanaFactory")!);
				}
			}
			catch { }
		}

		private static void BuildModel(string configName)
		{
			var config = new ConfigurationBuilder()
				.AddJsonFile($"Configuration\\{configName}.json", true, false)
				.Build();

			IModelSettings settings =  new ModelSettings(config);

			using (var dc = new DataConnection(settings.Provider, settings.ConnectionString))
			{
				var options = ScaffoldOptions.Default();

				options.DataModel.BaseContextClass = "LinqToDB.DataContext";

				options.CodeGeneration.MarkAsAutoGenerated = false;
				options.CodeGeneration.Namespace = $"DataModel.{configName}";
				options.CodeGeneration.ClassPerFile = true;
				options.CodeGeneration.ConflictingNames.Add("DataType"); // namespace, generated by naming test

				var generator = new Scaffolder(LanguageProviders.CSharp, HumanizerNameConverter.Instance, options);
				var dataModel = generator.LoadDataModel(dc);
				var sqlBuilder = dc.DataProvider.CreateSqlBuilder(dc.MappingSchema);
				var files = generator.GenerateCodeModel(
					sqlBuilder,
					dataModel,
					MetadataBuilders.GetAttributeBasedMetadataBuilder(generator.Language, sqlBuilder),
					SqlBoolEqualityConverter.Create(generator.Language));
				var sourceCode = generator.GenerateSourceCode(files);

				var root = $@"..\..\..\Generated\{configName}";
				Directory.CreateDirectory(root);

				for (var i = 0; i < sourceCode.Length; i++)
				{
					// TODO: file name normalization/deduplication
					File.WriteAllText($@"{root}\{sourceCode[i].FileName}", sourceCode[i].Code);
				}
			}
		}
	}
}

